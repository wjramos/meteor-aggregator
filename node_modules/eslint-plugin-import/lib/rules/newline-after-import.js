'use strict';

var _staticRequire = require('../core/staticRequire');

var _staticRequire2 = _interopRequireDefault(_staticRequire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

function getLineDifference(node, nextToken) {
  return nextToken.loc.start.line - node.loc.start.line;
} /**
   * @fileoverview Rule to enforce new line after import not followed by another import.
   * @author Radek Benkel
   */

function ensureNoForbiddenKeyword(context, node, tokenToInspect, tokenValue) {
  if (!tokenToInspect) {
    return;
  }

  if (getLineDifference(node, tokenToInspect) === 1 && tokenToInspect.type === 'Keyword' && tokenToInspect.value !== tokenValue) {
    context.report({
      loc: tokenToInspect.loc.start,
      message: 'Expected empty line after ' + tokenValue + ' statement not followed by another ' + tokenValue + '.'
    });
  }
}

module.exports = function (context) {
  return {
    ImportDeclaration: function ImportDeclaration(node) {
      var nextToken = context.getSourceCode(node).getTokenAfter(node);

      ensureNoForbiddenKeyword(context, node, nextToken, 'import');
    },
    CallExpression: function CallExpression(node) {
      if ((0, _staticRequire2.default)(node)) {
        var nextTokens = context.getSourceCode(node).getTokensAfter(node, 2);
        var tokenToInspect = nextTokens.length > 1 && nextTokens[0].type === 'Punctuator' ? nextTokens[1] : nextTokens[0];

        ensureNoForbiddenKeyword(context, node, tokenToInspect, 'require');
      }
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL25ld2xpbmUtYWZ0ZXItaW1wb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0E7Ozs7Ozs7Ozs7QUFNQSxTQUFTLGlCQUFULENBQTJCLElBQTNCLEVBQWlDLFNBQWpDLEVBQTRDO0FBQzFDLFNBQU8sVUFBVSxHQUFWLENBQWMsS0FBZCxDQUFvQixJQUFwQixHQUEyQixLQUFLLEdBQUwsQ0FBUyxLQUFULENBQWUsSUFBZixDQURRO0NBQTVDOzs7OztBQUlBLFNBQVMsd0JBQVQsQ0FBa0MsT0FBbEMsRUFBMkMsSUFBM0MsRUFBaUQsY0FBakQsRUFBaUUsVUFBakUsRUFBNkU7QUFDM0UsTUFBSSxDQUFDLGNBQUQsRUFBaUI7QUFDbkIsV0FEbUI7R0FBckI7O0FBSUEsTUFBSSxrQkFBa0IsSUFBbEIsRUFBd0IsY0FBeEIsTUFBNEMsQ0FBNUMsSUFDQyxlQUFlLElBQWYsS0FBd0IsU0FBeEIsSUFBcUMsZUFBZSxLQUFmLEtBQXlCLFVBQXpCLEVBQzFDO0FBQ0UsWUFBUSxNQUFSLENBQWU7QUFDYixXQUFLLGVBQWUsR0FBZixDQUFtQixLQUFuQjtBQUNMLGVBQVMsK0JBQStCLFVBQS9CLEdBQ1AscUNBRE8sR0FDaUMsVUFEakMsR0FDOEMsR0FEOUM7S0FGWCxFQURGO0dBRkE7Q0FMRjs7QUFnQkEsT0FBTyxPQUFQLEdBQWlCLFVBQVUsT0FBVixFQUFtQjtBQUNsQyxTQUFPO0FBQ0wsdUJBQW1CLDJCQUFVLElBQVYsRUFBZ0I7QUFDakMsVUFBTSxZQUFZLFFBQVEsYUFBUixDQUFzQixJQUF0QixFQUE0QixhQUE1QixDQUEwQyxJQUExQyxDQUFaLENBRDJCOztBQUdqQywrQkFBeUIsT0FBekIsRUFBa0MsSUFBbEMsRUFBd0MsU0FBeEMsRUFBbUQsUUFBbkQsRUFIaUM7S0FBaEI7QUFLbkIsb0JBQWdCLHdCQUFTLElBQVQsRUFBZTtBQUM3QixVQUFJLDZCQUFnQixJQUFoQixDQUFKLEVBQTJCO0FBQ3pCLFlBQU0sYUFBYSxRQUFRLGFBQVIsQ0FBc0IsSUFBdEIsRUFBNEIsY0FBNUIsQ0FBMkMsSUFBM0MsRUFBaUQsQ0FBakQsQ0FBYixDQURtQjtBQUV6QixZQUFNLGlCQUFpQixXQUFXLE1BQVgsR0FBb0IsQ0FBcEIsSUFBeUIsV0FBVyxDQUFYLEVBQWMsSUFBZCxLQUF1QixZQUF2QixHQUM1QyxXQUFXLENBQVgsQ0FEbUIsR0FFbkIsV0FBVyxDQUFYLENBRm1CLENBRkU7O0FBTXpCLGlDQUF5QixPQUF6QixFQUFrQyxJQUFsQyxFQUF3QyxjQUF4QyxFQUF3RCxTQUF4RCxFQU55QjtPQUEzQjtLQURjO0dBTmxCLENBRGtDO0NBQW5CIiwiZmlsZSI6InJ1bGVzL25ld2xpbmUtYWZ0ZXItaW1wb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFJ1bGUgdG8gZW5mb3JjZSBuZXcgbGluZSBhZnRlciBpbXBvcnQgbm90IGZvbGxvd2VkIGJ5IGFub3RoZXIgaW1wb3J0LlxuICogQGF1dGhvciBSYWRlayBCZW5rZWxcbiAqL1xuXG5pbXBvcnQgaXNTdGF0aWNSZXF1aXJlIGZyb20gJy4uL2NvcmUvc3RhdGljUmVxdWlyZSdcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJ1bGUgRGVmaW5pdGlvblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gZ2V0TGluZURpZmZlcmVuY2Uobm9kZSwgbmV4dFRva2VuKSB7XG4gIHJldHVybiBuZXh0VG9rZW4ubG9jLnN0YXJ0LmxpbmUgLSBub2RlLmxvYy5zdGFydC5saW5lXG59XG5cbmZ1bmN0aW9uIGVuc3VyZU5vRm9yYmlkZGVuS2V5d29yZChjb250ZXh0LCBub2RlLCB0b2tlblRvSW5zcGVjdCwgdG9rZW5WYWx1ZSkge1xuICBpZiAoIXRva2VuVG9JbnNwZWN0KSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoZ2V0TGluZURpZmZlcmVuY2Uobm9kZSwgdG9rZW5Ub0luc3BlY3QpID09PSAxXG4gICAgJiYgdG9rZW5Ub0luc3BlY3QudHlwZSA9PT0gJ0tleXdvcmQnICYmIHRva2VuVG9JbnNwZWN0LnZhbHVlICE9PSB0b2tlblZhbHVlKVxuICB7XG4gICAgY29udGV4dC5yZXBvcnQoe1xuICAgICAgbG9jOiB0b2tlblRvSW5zcGVjdC5sb2Muc3RhcnQsXG4gICAgICBtZXNzYWdlOiAnRXhwZWN0ZWQgZW1wdHkgbGluZSBhZnRlciAnICsgdG9rZW5WYWx1ZSArXG4gICAgICAgICcgc3RhdGVtZW50IG5vdCBmb2xsb3dlZCBieSBhbm90aGVyICcgKyB0b2tlblZhbHVlICsgJy4nLFxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEltcG9ydERlY2xhcmF0aW9uOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgY29uc3QgbmV4dFRva2VuID0gY29udGV4dC5nZXRTb3VyY2VDb2RlKG5vZGUpLmdldFRva2VuQWZ0ZXIobm9kZSlcblxuICAgICAgZW5zdXJlTm9Gb3JiaWRkZW5LZXl3b3JkKGNvbnRleHQsIG5vZGUsIG5leHRUb2tlbiwgJ2ltcG9ydCcpXG4gICAgfSxcbiAgICBDYWxsRXhwcmVzc2lvbjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKGlzU3RhdGljUmVxdWlyZShub2RlKSkge1xuICAgICAgICBjb25zdCBuZXh0VG9rZW5zID0gY29udGV4dC5nZXRTb3VyY2VDb2RlKG5vZGUpLmdldFRva2Vuc0FmdGVyKG5vZGUsIDIpXG4gICAgICAgIGNvbnN0IHRva2VuVG9JbnNwZWN0ID0gbmV4dFRva2Vucy5sZW5ndGggPiAxICYmIG5leHRUb2tlbnNbMF0udHlwZSA9PT0gJ1B1bmN0dWF0b3InXG4gICAgICAgICAgPyBuZXh0VG9rZW5zWzFdXG4gICAgICAgICAgOiBuZXh0VG9rZW5zWzBdXG5cbiAgICAgICAgZW5zdXJlTm9Gb3JiaWRkZW5LZXl3b3JkKGNvbnRleHQsIG5vZGUsIHRva2VuVG9JbnNwZWN0LCAncmVxdWlyZScpXG4gICAgICB9XG4gICAgfSxcbiAgfVxufVxuIl19