/**
 * @fileoverview Enforce that elements with explicit or implicit roles defined contain only
 * `aria-*` properties supported by that `role`.
 * @author Ethan Cohen
 */
'use strict';

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

var _getAttribute = require('../util/getAttribute');

var _getAttribute2 = _interopRequireDefault(_getAttribute);

var _getAttributeValue = require('../util/getAttributeValue');

var _getNodeType = require('../util/getNodeType');

var _getNodeType2 = _interopRequireDefault(_getNodeType);

var _role = require('../util/attributes/role');

var _role2 = _interopRequireDefault(_role);

var _ARIA = require('../util/attributes/ARIA');

var _ARIA2 = _interopRequireDefault(_ARIA);

var _getImplicitRole = require('../util/getImplicitRole');

var _getImplicitRole2 = _interopRequireDefault(_getImplicitRole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var errorMessage = function errorMessage(attr, role, tag, isImplicit) {
  if (isImplicit) {
    return 'The attribute ' + attr + ' is not supported by the role ' + role + '. This role is implicit on the element ' + tag + '.';
  }

  return 'The attribute ' + attr + ' is not supported by the role ' + role + '.';
};

module.exports = function (context) {
  return {
    JSXOpeningElement: function JSXOpeningElement(node) {
      // If role is not explicitly defined, then try and get its implicit role.
      var type = (0, _getNodeType2.default)(node);
      var role = (0, _getAttribute2.default)(node.attributes, 'role');
      var roleValue = role ? (0, _getAttributeValue.getLiteralAttributeValue)(role) : (0, _getImplicitRole2.default)(type, node.attributes);
      var isImplicit = roleValue && role === undefined;

      // If there is no explicit or implicit role, then assume that the element
      // can handle the global set of aria-* properties.
      // This actually isn't true - should fix in future release.
      if (!roleValue || _role2.default[roleValue.toUpperCase()] === undefined) {
        return;
      }

      // Make sure it has no aria-* properties defined outside of its property set.
      var propertySet = _role2.default[roleValue.toUpperCase()].props;
      var invalidAriaPropsForRole = Object.keys(_ARIA2.default).filter(function (attribute) {
        return propertySet.indexOf(attribute) === -1;
      });
      var invalidAttr = _getAttribute2.default.apply(undefined, [node.attributes].concat(_toConsumableArray(invalidAriaPropsForRole)));

      if (invalidAttr === undefined) {
        return;
      }

      context.report({
        node: node,
        message: errorMessage(invalidAttr.name.name, roleValue, type, isImplicit)
      });
    }
  };
};

module.exports.schema = [{ type: 'object' }];